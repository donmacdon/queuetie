generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  phoneNumber String
  email       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reservation Reservation[]
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  tags      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch[]
  user      User[]
}

model Branch {
  id           String        @id @default(uuid())
  name         String
  address      String
  gracePeriod  Int           @default(0)
  imageUrl     String        @default("https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Placeholder_view_vector.svg/310px-Placeholder_view_vector.svg.png")
  restaurantId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  reservation  Reservation[]

  @@index([restaurantId])
}

model Reservation {
  id              String      @id @default(uuid())
  reservationTime DateTime
  adultCount      Int         @default(1)
  childCount      Int?
  isConfirmed     Boolean     @default(false)
  isCancelled     Boolean     @default(false)
  userId          String
  branchId        String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  branch          Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  profile         Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([branchId])
}

enum UserRole{
  ADMIN
  RESTAURANT_MANAGER
  BRANCH_MANAGER
  BRANCH_STAFF
}

model User{
  id String @id @default(uuid())
  role UserRole @default(BRANCH_STAFF)

  restaurantId String?
  restaurant Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([restaurantId])
}
